Curso introductorio a Golang

Buenos Aires
Noviembre 2016

Gustavo Rodriguez
Mariano Labariñas


* ¿Quienes Somos?

.image ./resources/gustavo.png _ _

.image ./resources/mariano.png _ _

* Motivación

- El lenguaje Golang, arranca como un proyecto en 2007 dentro de Google. Los objetivos del proyecto eran eliminar la lentitud y la torpeza a la hora de desarrollar software en Google.
- Fue anunciado al mundo a fines del 2009, y en 2012 se estabiliza la API creando la versión 1.0 . La versión actual es la 1.7.x y los cambios en la API fueron mínimos.
- Los desarrolladores trabajando en Google están en sus primeros años de carrera y se encuentran más familiarizados con lenguajes “procedurales” como “C”.
- Es imperativo que los desarrolladores puedan ser productivos muy rápidamente en lenguajes y herramientas que no pueden ser “muy radicales”
- El lenguaje fue diseñado para personas que escriben, leen y “debugean” grandes piezas de software

* Motivación: Objetivos

- Que fuera simple para escribir (menos es más). 
- Que fuera simple para leer (nos pasamos mucho tiempo leyendo código de otras personas).
- Concurrente (multi-core, asincrónico).
- Que compile a código nativo y rápido.
- Que tenga un memory footprint bajo.

* Motivación

- *El*"sweet*spot"*de*Go*esta*en*escribir*software*de*backend*

- "Go is a good general purpose language, but the sweet spot it was designed for is writing large-scale, concurrent, server-side software"

* Algunos proyectos que incluyen Go

- YouTube 
- dl.google.com
- Booking.com
- Blogger
- Datadog
- Facebook
- Github
- Google Code 
- Netflix
- Mercadolibre ;)

* ¿Proyectos hechos en GO?

Docker

.image ./resources/docker.png _ _

* ¿Proyectos hechos en GO?

Kubernetes

.image ./resources/kubernetes.png _ _

* ¿Proyectos hechos en GO?

CockroachDB (beta)

.image ./resources/cockroach.png _ _

* ¿Proyectos hechos en GO?

.image ./resources/others.png _ _

* ¿Paradigma?

- Imperativo
- Estructurado
- No orientado a objetos (¿?)

* Go Basics

- Fuertemente tipado
- Inferencia de tipos
- Funciones son “first class citizen”, las funciones pueden ser pasadas como parámetros
- Parámetros pasados siempre por “valor”
- Punteros para pasar parámetros por “referencia”
- GC
- “Semi” Orientado a objetos -> Composition
- Interfaces
- Built in Web Server
- Built in Testing framework


* Instalando GO!

- Descarga la versión para tu OS desde [[https://golang.org/dl/][AQUÍ]]
- Abrí el pkg y seguí las instrucciones en pantalla, Golang quedará instalado por default en -> /usr/local/go
- Exportar GOROOT apuntando a directorio de instalación, agregar  GOROOT/bin al PATH y LISTO :)
- Para chequear tu la instalación correcta tipear -> go version 

* ¿Donde programar?

- [[https://github.com/joefitzgerald/go-plus][Plugin para Atom]]
- [[https://goclipse.github.io][Plugin para Eclipse]]
- [[hhttps://plugins.jetbrains.com/plugin/?id=5047][Plugin para IntelliJ]]
- [[https://github.com/DisposaBoy/GoSublime][Plugin para Sublime]]
- [[https://github.com/Microsoft/vscode-go][Plugin para Visual Studio Code]]
- [[https://github.com/visualfc/liteide][Lite Ide: Go IDE]]
- [[https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins][Varios mas... ]]

* Go Basics: Workspace

GOPATH
	|_ BIN: Contiene los archivos ejecutables
	|_ SRC: Contiene los fuentes organizados en paquetes
	|_ PKG: Contiene los paquetes en formato binario


* Hello world!!

.play ./resources/src/00_hello_world/main.go

Comandos básicos desde consola

	go command [arguments]

	build     Compila paquetes y dependencias
	clean     Remueve archivos object     
	get       Descarga e instala paquetes y dependencias
	install   Compila e instala paquetes y dependencias
	run       Compila y corre paquetes y dependencias
	test      Testea paquetes
	...

* Tipos Básicos

- bool
- string
- int  int8  int16  int32  int64
- uint uint8 uint16 uint32 uint64 uintptr
- byte // alias for uint8
- rune // alias for int32 - unicode code point
- float32 float64
- complex64 complex128

* Constantes

- Pueden ser del tipo: character, string, boolean o valores numéricos

- Ejemplos:

	const World = "世界"
	const Truth = true


* Inicialización de Variables

	var s string
	var s string = ""
	var s = ""
	s:=""

*Zero* *value:*

*0* para tipos numéricos - *false* para booleanos - *""* (string vacio) para strings

.play ./resources/src/01_zero_values/main.go

* Tipos de if

	if x < 0 { }

	if v := math.Pow(x, n); v < lim {}

	if ... {} else { }

* Iteraciones #1

_for_initialization;_condition;_post_{_}_

.play ./resources/src/02_iterations/0/main.go

* Iteraciones #2

_for_condition_{_}_

.play ./resources/src/02_iterations/1/main.go

* Iteraciones #3

_for_{_}_

.play ./resources/src/02_iterations/2/main.go

* Iteraciones #4

_using_range_

.play ./resources/src/02_iterations/3/main.go

* Switch

.play ./resources/src/02_iterations/4/main.go

* Funciones

.play ./resources/src/03_functions/main.go

* Paquetes

.code ./resources/src/04_packages/math/math.go
.play ./resources/src/04_packages/main.go

* Conversión de variables

.play ./resources/src/05_variables_type_convertion/main.go

* Punteros

.play ./resources/src/06_pointers/main.go

* Tipo de datos

.code ./resources/src/07_types/main.go /START OMIT/,/END OMIT/

* Tipo de datos - continuación

.play ./resources/src/07_types/main.go /^func main/,/^}/

* Structs - inicialización

	type Vertex struct {
		X, Y int
	}

	var (
		v1 = Vertex{1, 2}  // has type Vertex
		v2 = Vertex{X: 1}  // Y:0 is implicit
		v3 = Vertex{}      // X:0 and Y:0
		p  = &Vertex{1, 2} // has type *Vertex
	)

* Structs 

	type tree struct {
		value       int
		left, right *tree
	}

	func add(t *tree, value int) *tree {
		if t == nil {
			// Equivalent to return &tree{value: value}.
			t = new(tree)
			t.value = value
			return t
		}
		if value < t.value {
			t.left = add(t.left, value)
		} else {
			t.right = add(t.right, value)
		}
		return t
	}

* Collections #1

Array Loop

.play ./resources/src/09_collections/1/main.go


* Collections #2

Slices

	months := [...]string{1: "January", /* ... */, 12: "December"}
	Q2 := months[4:7]                                      summer := months[6:9]
	fmt.Println(Q2)     // ["April" "May" "June"]          fmt.Println(summer) // ["June" "July" "August"]”

.image ./resources/slices.png _ _


* Collections #2

Slice Loop

.play ./resources/src/09_collections/2/main.go

* Collections #3

Map Loop

.play ./resources/src/09_collections/3/main.go

* Funciones como valores

.play ./resources/src/10_functions_as_values/main.go

* Creando tipos -> &, new y make 

_make_: función built-in que se usa únicamente para allocar e inicializar slices, maps o channels. Se pasa el tipo, el tamaño y la capacidad. Como resultado obtenemos la variable en si, no un puntero

	slice := make([]int, 0, 10)

_new_: función built-in que se usa para allocar memoria, retorna un puntero al valor allocado con zero value

	someVar := new(int)

_&_: al igual que el new se utiliza para allocar memoria y retorna un puntero pero ademas nos permite inicializar atributos en variables complejas: 

	type Dog struct {
		Name string
		Age  int
	}

	d := &Dog{Name: "Tom", Age: 14}

* 1º Ejercicio

Hacer un programa que reciba un parámetro *p* por consola y que cacule la suma de los valores *v* tales que *0*<=*v*<=*p* , siendo *v* un número divisible por *3* o por *5*

- Ayuda para leer argumentos desde la consola

	for i := 1; i < len(os.Args); i++ {
		fmt.Println(os.Args[i])
	}

* Gorutines

.play ./resources/src/14_gorutines/main.go

* Defer

.play ./resources/src/13_defer/main.go

* Recover

.play ./resources/src/16_recover/main.go /START OMIT/,/END OMIT/


* Interfaces

.play ./resources/src/11_interfaces/1/main.go

* Interfaces continuación

	type Flash struct {
		Alias string
		Age   int
	}

	func (s *Flash) Powers() {
		fmt.Printf("%s powers: %s", s.Alias, "speed")
	}

* Interfaces continuación

.play ./resources/src/11_interfaces/2/main.go /^func main/,/^}/

* Composition

	type SuperHero interface {
		Powers()
	}

	type Superman struct {
		Alias string
		Age   int
	}

	func (s *Superman) Powers() {
		fmt.Printf("%s powers: %s", s.Alias, "invulnerability, heat vision, flight, speed")
	}

	type SuperBoy struct {
		Superman
	}

* Composition continuación

.play ./resources/src/15_composition/1/main.go /^func main/,/^}/

* Composition continuación

	type SuperBoy struct {
	    Superman
	    Alias string
	    Age   int
	}

	func (s *SuperBoy) Powers() string {
	    return fmt.Sprintf("powers: %s", "flight")
	}
    
.play ./resources/src/15_composition/2/main.go /^func main/,/^}/

* Errors

.play ./resources/src/12_errors/main.go

* Testing

Golang posee un built-in testing framework 

Esté es provisto mediante el package testing

Todo archivo Go con el suffix “_test.go” es considerado un test suite en Go

En cada test suite podemos correr:
	- Test
	- Benchmarks
	- Examples

* Testing continuación

Cada TestXxx function en una test suite es un test

Cada BenchmarkXxx function en una test suite es un benchmark

Cada ExampleXxx function en una test suite es un example

White box testing / Black box testing

El comando “go test” corre los test del proyecto

* Testing: Init

	func TestMain(m *testing.M) {
		before()

		code := m.Run()

		after()

		os.Exit(code)
	}


* Testing: Test

	//Basic Test
	func TestXXX(t *testing.T) {
		//t.Parallel()

		result, err := add(a, b)

		if err != nil {
			t.Fatal("We got some error", err)

			//Skip test
			//t.Skip("We got some error", err)
		}

		expected := 6

		if result != expected {
			t.Fatalf("%d + %d Should be equals to %d", a, b, expected)
		}
	}

* Testing: Benchmark

	//Basic Benchmark
	func BenchmarkXXX(bt *testing.B) {
		for i := 0; i < bt.N; i++ {
			add(a, b)
		}

		//Setting N limit
		bt.N = 1000

		//Reset timer
		//b.ResetTimer()

		for i := 0; i < bt.N; i++ {
			add(a, b)
		}

		//Parallel
		bt.RunParallel(
			func(pb *testing.PB) {
				for pb.Next() {
					add(a, b)
				}
			}
		)
		
	}

* Testing: Examples
	
	//Basic Example
	func ExampleXXX() {
		result, _ := add(a, b)

		fmt.Println(result)

		// Output: 6
	}


- [[https://golang.org/pkg/strings/#example_Contains][strings contains example]]

* Testing: Not native frameworks

- [[https://github.com/franela/goblin][Goblin]]
- [[https://github.com/stretchr/testify][Testify]]
- [[https://github.com/onsi/ginkgo][Ginkgo]]
- [[https://github.com/smartystreets/goconvey][GoConvey]]

* Como seguir?

- [[https://tour.golang.org][Tour Go]]
- [[https://golang.org/doc/effective_go.html][Effective Go]]
- [[https://gobyexample.com][Go By Example]]
- [[https://golang.org/doc/code.html][How to Write Go Code]]
- [[http://www.golangpatterns.info][Go Design Patterns]]
- [[https://golang.org/pkg][Standar Library]]
- [[https://github.com/golang/go/wiki][Awesome Go]]
